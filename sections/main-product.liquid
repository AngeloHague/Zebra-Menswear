{{ 'option_selection.js' | shopify_asset_url | script_tag }}
{{ 'product.css' | asset_url | stylesheet_tag }}
{{ 'description.css' | asset_url | stylesheet_tag }}
{{ 'image-zoom.css' | asset_url | stylesheet_tag }}
<script src="{{ 'image-zoom.js' | asset_url }}" async></script>
{% assign current_variant = product.selected_or_first_available_variant %}
{% assign featured_image = current_variant.featured_image | default: product.featured_image %}
<div class='main-product'>
  <div class='product-images'>
    <div class='slider'>
      <ul class='images'>
        {% for image in product.images %}
          {% assign prev = 0 %}
          {% assign next = 0 %}
          {% if forloop.index == 1 %}
              {% assign prev = forloop.length %}
              {% assign next = forloop.index | plus: 1 %}
          {% elsif forloop.index == forloop.length %}
              {% assign prev = forloop.index | minus: 1 %}
              {% assign next = 1 %}
          {% else %}
              {% assign prev = forloop.index | minus: 1 %}
              {% assign next = forloop.index | plus: 1 %}
          {% endif %}
        <section class='product-image' id='image-{{forloop.index}}' >
          <picture>
            <source srcset="{{ image | img_url: '300x' }}, {{ image | img_url: '600x' }} 2x">
            <source srcset="{{ image | img_url: '300x' }}, {{ image | img_url: '600x' }} 2x">
            <img src="{{ image | img_url: '300x' }}" width='100%' height='100%' onclick="imageZoom(this,'{{ image | img_url: 'master' }}')" loading='lazy'>
          </picture>
          <a class='control left' href='#image-{{ prev }}' onclick="event.preventDefault(); scrollToAnchor('#image-{{ prev }}')">
            {% render 'icon-chevron-left' %}
          </a>
          <a class='control right' href='#image-{{ next }}' onclick="event.preventDefault(); scrollToAnchor('#image-{{ next }}')">
            {% render 'icon-chevron-right' %}
          </a>
        </section>
      {% endfor %}
    </ul>
    <div class='zoom-info js-enabled'>
      <p>Click image to view full-size </p>
    </div>
    </div>
    <ul class='image-nav'>
      {% assign more-images = 0 %}
      <input type='radio' name='radio-button' id='show-more' />
      
      {% for image in product.images %}
        {% if forloop.index < 4 %}
          <li class='product-image'>
            <a href='#image-{{ forloop.index }}' onclick="event.preventDefault(); scrollToAnchor('#image-{{ forloop.index }}')">
              <picture>
                <source srcset="{{ image | img_url: '300x' }}, {{ image | img_url: '600x' }} 2x">
                <img src="{{ image | img_url: '300x' }}" width='100%' height='100%'>
              </picture>
            </a>
          </li>
        {% else %}
        {% assign more-images = more-images | plus: 1 %}
          <li class='product-image more'>
            <a href='#image-{{ forloop.index }}' onclick="event.preventDefault(); scrollToAnchor('#image-{{ forloop.index }}')">
              <picture>
                <source srcset="{{ image | img_url: '300x' }}, {{ image | img_url: '600x' }} 2x">
                <img src="{{ image | img_url: '300x' }}" width='100%' height='100%'>
              </picture>
            </a>
          </li>
        {% endif %}
      {% endfor %}
      <li class='show-more'>
        <label for='show-more'>
          + {{ more-images }}
        </label>
      </li>
    </ul>
  </div>
  <div id='image-zoom' class='hidden'>
    <div class='backdrop' onclick='imageZoomClose()'></div>
    <div class='container'>
      <div>
        <p>Hover to zoom <a id='image-zoom-url'>Open image in new tab</a></p>
        <div class='close' onclick='imageZoomClose()'>{% render 'icon-x.liquid' %}</div>
      </div>
      <div id='image-zoom-container'>
        <div><img id='image-zoom-master' alt="Zoomed in image" loading='lazy'></div>
        <div><img id='image-zoom-magnified' alt="Zoomed in image" loading='lazy'></div>
      </div>
    </div>
  </div>
  
  <div class='product-info'>
    {% assign hyphenated-vendor = product.vendor | replace: ' ', '-' %}
    {% assign vendor = collections[hyphenated-vendor] %}
    <h4 class='vendor'>{{ product.vendor | link_to: vendor.url}}</h4>
    <h4 class='title'>{% render 'filtered-product-title' with product.title %}</h4>
    <div>
      {% if current_variant.price < product.compare_at_price %}
        <h4 class='price'>
          <span class='current js-inline' id='price'>{{ current_variant.price| money }}</span>
          <span class='original' id='compare-at'>{{ product.compare_at_price| money }}</span>
          {% if product.compare_at_price != blank %}
            {% assign og_price = product.compare_at_price | money_without_currency %}
            {% assign percentage = current_variant.price | money_without_currency | divided_by: og_price %}
            {% assign diff = 1 | minus: percentage | times: 100 %}
          {% else %}
            {% assign diff = 0 %}
          {% endif %}
          <span class='difference js-inline' id='difference'>{% if product.compare_at_price != blank and product.price < product.compare_at_price %}SALE (-{{ diff | round: 0 }}%){% endif %} <span class='no-js'>SALE</span></span>  
        </h4>
      {% else %}
      <h4 class='price no-sale'>
        <span class='original' id='compare-at'>{{ product.compare_at_price| money }}</span>
        <span class='current js-inline' id='price'>{{ current_variant.price| money }}</span>
        {% if product.compare_at_price != blank %}
          {% assign og_price = product.compare_at_price | money_without_currency %}
          {% assign percentage = current_variant.price | money_without_currency | divided_by: og_price %}
          {% assign diff = 1 | minus: percentage | times: 100 %}
        {% else %}
          {% assign diff = 0 %}
        {% endif %}
        <span class='difference js-inline' id='difference'>{% if product.compare_at_price != blank and product.price < product.compare_at_price %}(-{{ diff | round: 0 }}%){% endif %} <span class='no-js'>SALE</span></span>  
      </h4>
      {% endif %}
      
      <div class='js-enabled' id='remaining'></div>
    </div>
    <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm">
        <div class='variants'>
          <select id="product-select" name="id">
            {% for variant in product.variants %}
              <option value="{{ variant.id }}" data-variant-quantity="{{ variant.inventory_quantity }}"
                {% if variant == product.selected_or_first_available_variant %}selected="selected"{% endif %}
                {% if variant.inventory_quantity == 0 %}disabled="true"{% endif %}
              >
                {{ variant.title }} - {% if variant.inventory_quantity == 0 %}SOLD OUT - {% endif %}{{ variant.price | money }}
              </option>
            {% endfor %}
          </select>
        </div>
      {% if product.available %}
        <button class='button' type="submit" name="add" id="AddToCart" onclick="addToCart('AddToCartForm'); return false;">Add to cart</button>
      {% else %}
        <button class='button' type="submit" name="add" id="SoldOut" disabled>SOLD OUT</button>
      {% endif %}
    </form>
    <div class='product-details'>
      <details open>
        <summary>
          <div>
            {% render 'icon-align-justify' %}
            <p>Description</p>
          </div>
          <div class='indicator'>{% render 'icon-chevron-down' %}</div>
        </summary>
        <div class='description'>{{ product.description }}</div>
      </details>
      <details>
        <summary>
          <div>
            {% render 'icon-heart' %}
            <p>Care Information</p>
          </div>
          <div class='indicator'>{% render 'icon-chevron-down' %}</div>
        </summary>
        <div class='care-info'>
          {% render 'care-information' %}
        </div>
      </details>
    </div>
  </div>
</div>

<script>
  {% for variant in product.variants %}
    variantStock[{{- variant.id -}}] = {{ variant.inventory_quantity }};
  {% endfor %}
  const formatter = new Intl.NumberFormat('en-GB', {
    style: 'currency',
    currency: 'GBP',
    minimumFractionDigits: 2
  })

  function toggleAddButton(enabled) {
    const btn = document.getElementById('AddToCart');
    btn.disabled = !enabled;
    btn.innerHTML = (enabled) ? 'Add To Cart' : 'Sold Out';
  }

  function onVariantChange(variant, available) {
    let price = document.getElementById('price');
    let compare_at = document.getElementById('compare-at');
    let difference = document.getElementById('difference');
    let remaining = document.getElementById('remaining');
    
    if (price) price.innerHTML = formatter.format(variant.price/100);
    if (compare_at) compare_at.innerHTML = formatter.format(variant.compare_at_price/100);
    if (difference) difference.innerHTML = 'SALE (-' + Math.round((1 - (variant.price / variant.compare_at_price)) * 100) + '%)';
    if ((variant.compare_at_price || variant.compare_at_price == 0)&&(this.price < this.compare_at_price)) price.classList.remove('no-sale')
    else price.classList.add('no-sale');
    if (variantStock[variant.id] == 0) {
      remaining.innerHTML = 'Out of stock!';
    }
    {% if section.settings.stock-warning %}
      if (variantStock[variant.id] < {{ section.settings.stock-warning }} && variantStock[variant.id] > 0 && variant.inventory_management == 'shopify') {
        if (variantStock[variant.id] == 1) {
          remaining.innerHTML = 'Last in this size!';
        } else if (variantStock[variant.id] > 1) {
          remaining.innerHTML = 'Last few in this size!';
        }
      } else if (!available) {
        remaining.innerHTML = 'Out of stock!';
      }
    {% endif %}
    toggleAddButton(available);
  };

  var selectCallback = function(variant, selector) {
    if (!variant) return;
    if (variant.available) {
      // Construct URLSearchParams object instance from current URL querystring.
      var queryParams = new URLSearchParams(window.location.search);
      
      // Set new or modify existing parameter value. 
      queryParams.set("variant", variant.id);
      
      // Replace current querystring with the new one.
      history.replaceState(null, null, "?"+queryParams.toString());
      onVariantChange(variant, true)
    } else onVariantChange(variant, false);
  };
  new Shopify.OptionSelectors('product-select', {
    product: {{ product | json }},
    onVariantSelected: selectCallback,
    enableHistoryState: true
  });
</script>

{% schema %}
    {
        "name": "Product",
        "settings": [
          {
            "type" : "number",
            "id" : "stock-warning",
            "label" : "Displays a stock warning when there is less than X amount left",
            "default" : 4
          }
      ]
    }
{% endschema %}